version: 2.1
orbs:
  slack: circleci/slack@3.4.2
executors:
  app-executor:
    docker:
      - image: circleci/node:12.14.0
        environment:
          REACT_APP_API_KEY: ${REACT_APP_API_KEY}
          REACT_APP_AUTH_DOMAIN: ${REACT_APP_AUTH_DOMAIN}
          REACT_APP_DATABASE_URL: ${REACT_APP_DATABASE_URL}
          REACT_APP_PROJECT_ID: ${REACT_APP_PROJECT_ID}
          REACT_APP_APP_ID: ${REACT_APP_APP_ID}
          REACT_APP_STORAGE_BUCKET: ${REACT_APP_STORAGE_BUCKET}
          REACT_APP_MESSAGING_SENDER_ID: ${REACT_APP_MESSAGING_SENDER_ID}
          REACT_APP_TMBD_KEY: ${REACT_APP_TMBD_KEY}
    working_directory: ~/project
  slack-executor:
    docker:
      - image: 'cibuilds/base:latest'
    resource_class: small

aliases:
  - &show-current-branch
    run:
      name: Show current branch
      command: echo ${CIRCLE_BRANCH}
  - &restore-cache
    restore_cache:
        keys:
          - app-{{ checksum "package.json" }}
          - app-
  - &install-dependencies
    run:
        name: Install dependencies
        command: npm install
  - &save-cache
    save_cache:
      paths:
        - node_modules
      key: app-{{ checksum "package.json" }}
  - &install-aws-cli
    run:
      name: Install AWS CLI
      working_directory: /
      command: |
        sudo apt-get -y -qq update
        sudo apt-get install -y awscli
        sudo apt-get install -y python-pip python-dev build-essential
  - &build-project
    run:
      name: Build Project
      command: |
        npm install
        npm run build
        cd build
        zip ../build.zip -r * .[^.]*
        echo "Build successful"

workflows:
  build_and_deploy:
    jobs:
      - build:
          filters:
            branches:
              only:
                - develop
                - staging
                - master
      - linting:
          requires:
            - build
          filters:
            branches:
              only:
                - develop
                - staging
                - master
      - prettier:
          requires:
            - build
          filters:
            branches:
              only:
                - develop
                - staging
                - master
      - test:
          requires:
            - build
          filters:
            branches:
              only:
                - develop
                - staging
                - master
      - deploy_to_heroku:
          requires:
            - linting
            - prettier
            - test
          filters:
            branches:
              only:
                - master
      - deploy_to_aws_s3:
          requires:
            - linting
            - prettier
            - test
          filters:
            branches:
                only:
                  - develop
                  - staging
                  - master
      - deploy_to_aws_frontcloud:
          requires:
              - deploy_to_aws_s3
          filters:
            branches:
              only:
                - develop
                - staging
                - master
      - notify-via-slack:
          requires:
            - deploy_to_heroku
            - deploy_to_aws_frontcloud
          filters:
            branches:
              only:
                - develop
                - staging
                - master

jobs:
  build:
    executor: app-executor
    steps:
      - checkout
      - *show-current-branch
      - *restore-cache
      - *install-dependencies
      - *save-cache

  linting:
    executor: app-executor
    steps:
      - checkout
      - *show-current-branch
      - *restore-cache
      - run:
          name: Run linting
          command: npm run lint

  prettier:
    executor: app-executor
    steps:
      - checkout
      - *show-current-branch
      - *restore-cache
      - run:
          name: Run prettier check
          command: npm run format:check

  test:
    executor: app-executor
    steps:
      - checkout
      - *show-current-branch
      - *restore-cache
      - run:
          name: Run test files
          command: npm run test

  deploy_to_heroku:
    executor: app-executor
    steps:
      - checkout
      - *show-current-branch
      - run:
          name: Deploy to Heroku
          command:  git push https://heroku:$HEROKU_API_KEY@git.heroku.com/movie-night-prod.git -f

  deploy_to_aws_s3:
    executor: app-executor
    steps:
      - checkout
      - *show-current-branch
      - *install-aws-cli
      - *build-project
      - run:
          name: Deploy to AWS S3
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ]
            then
              aws --region ${AWS_REGION} s3 sync ~/project/build s3://${AWS_BUCKET_PRODUCTION} --delete
            elif [ "${CIRCLE_BRANCH}" == "staging" ]
            then
              aws --region ${AWS_REGION} s3 sync ~/project/build s3://${AWS_BUCKET_STAGING} --delete
            else
              aws --region ${AWS_REGION} s3 sync ~/project/build s3://${AWS_BUCKET_DEV} --delete
            fi

  deploy_to_aws_frontcloud:
    executor: app-executor
    steps:
      - checkout
      - *show-current-branch
      - *install-aws-cli
      - *build-project
      - run:
          name: Deploy to AWS cloudfronts
          command: |
            aws configure set preview.cloudfront true
            if [ "${CIRCLE_BRANCH}" == "master" ]
            then
              aws cloudfront create-invalidation --distribution-id ${AWS_PRODUCTION_DISTRIBUTION_ID} --paths /\*
            elif [ "${CIRCLE_BRANCH}" == "staging" ]
            then
              aws cloudfront create-invalidation --distribution-id ${AWS_STAGING_DISTRIBUTION_ID} --paths /\*
            else
              aws cloudfront create-invalidation --distribution-id ${AWS_DEV_DISTRIBUTION_ID} --paths /\*
            fi
  notify-via-slack:
    executor: slack-executor
    steps:
      - slack/notify:
          message: "${CIRCLE_BRANCH} branch deployment to aws s3 and cloudfront is complete."
          webhook: $SLACK_WEBHOOK
          author_link: d8ufwol492b71.cloudfront.net
      - slack/status:
          webhook: $SLACK_WEBHOOK
